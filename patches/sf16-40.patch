diff --git a/src/evaluate.cpp b/src/evaluate.cpp
index 35d05427..7802e98a 100644
--- a/src/evaluate.cpp
+++ b/src/evaluate.cpp
@@ -74,8 +74,7 @@ namespace Eval {
   void NNUE::init() {
 
     useNNUE = Options["Use NNUE"];
-    if (!useNNUE)
-        return;
+    return;
 
     string eval_file = string(Options["EvalFile"]);
     if (eval_file.empty())
@@ -117,6 +116,7 @@ namespace Eval {
 
   /// NNUE::verify() verifies that the last net used was loaded successfully
   void NNUE::verify() {
+    return; // looks good to me
 
     string eval_file = string(Options["EvalFile"]);
     if (eval_file.empty())
diff --git a/src/main.cpp b/src/main.cpp
index c40e0fa3..0d5c05cd 100644
--- a/src/main.cpp
+++ b/src/main.cpp
@@ -34,7 +34,6 @@ int main(int argc, char* argv[]) {
 
   std::cout << engine_info() << std::endl;
 
-  CommandLine::init(argc, argv);
   UCI::init(Options);
   Tune::init();
   PSQT::init();
diff --git a/src/search.cpp b/src/search.cpp
index 740ad71e..2d4a1291 100644
--- a/src/search.cpp
+++ b/src/search.cpp
@@ -1854,7 +1854,7 @@ void MainThread::check_time() {
 string UCI::pv(const Position& pos, Depth depth) {
 
   std::stringstream ss;
-  TimePoint elapsed = Time.elapsed() + 1;
+  TimePoint elapsed = std::max(Time.elapsed() + 1, TimePoint(1));
   const RootMoves& rootMoves = pos.this_thread()->rootMoves;
   size_t pvIdx = pos.this_thread()->pvIdx;
   size_t multiPV = std::min((size_t)Options["MultiPV"], rootMoves.size());
@@ -1941,6 +1941,9 @@ bool RootMove::extract_ponder_from_tt(Position& pos) {
 void Tablebases::rank_root_moves(Position& pos, Search::RootMoves& rootMoves) {
 
     RootInTB = false;
+    Cardinality = 0;
+    return;
+
     UseRule50 = bool(Options["Syzygy50MoveRule"]);
     ProbeDepth = int(Options["SyzygyProbeDepth"]);
     Cardinality = int(Options["SyzygyProbeLimit"]);
diff --git a/src/tt.cpp b/src/tt.cpp
index 3339c993..198ee255 100644
--- a/src/tt.cpp
+++ b/src/tt.cpp
@@ -85,6 +85,10 @@ void TranspositionTable::resize(size_t mbSize) {
 
 void TranspositionTable::clear() {
 
+  std::memset(table, 0, clusterCount * sizeof(Cluster));
+  // no new threads for wasm, otherwise terrible things.
+  return;
+
   std::vector<std::thread> threads;
 
   for (size_t idx = 0; idx < size_t(Options["Threads"]); ++idx)
diff --git a/src/uci.cpp b/src/uci.cpp
index ed16f24c..c4f38a2a 100644
--- a/src/uci.cpp
+++ b/src/uci.cpp
@@ -36,6 +36,8 @@
 
 using namespace std;
 
+std::string js_getline(); // wasm/glue.cpp
+
 namespace Stockfish {
 
 namespace {
@@ -244,9 +246,7 @@ void UCI::loop(int argc, char* argv[]) {
       cmd += std::string(argv[i]) + " ";
 
   do {
-      if (argc == 1 && !getline(cin, cmd)) // Wait for an input or an end-of-file (EOF) indication
-          cmd = "quit";
-
+      cmd = js_getline();
       istringstream is(cmd);
 
       token.clear(); // Avoid a stale if getline() returns nothing or a blank line
@@ -299,7 +299,7 @@ void UCI::loop(int argc, char* argv[]) {
       else if (!token.empty() && token[0] != '#')
           sync_cout << "Unknown command: '" << cmd << "'. Type help for more information." << sync_endl;
 
-  } while (token != "quit" && argc == 1); // The command-line arguments are one-shot
+  } while (token != "quit");
 }
 
 
diff --git a/src/ucioption.cpp b/src/ucioption.cpp
index f6342e5c..b44815da 100644
--- a/src/ucioption.cpp
+++ b/src/ucioption.cpp
@@ -79,7 +79,7 @@ void init(OptionsMap& o) {
   o["SyzygyProbeDepth"]      << Option(1, 1, 100);
   o["Syzygy50MoveRule"]      << Option(true);
   o["SyzygyProbeLimit"]      << Option(7, 0, 7);
-  o["Use NNUE"]              << Option(true, on_use_NNUE);
+  o["Use NNUE"]              << Option(false, on_use_NNUE);
   o["EvalFile"]              << Option(EvalFileDefaultName, on_eval_file);
 }
 
